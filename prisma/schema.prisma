generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

model User {
  id                        String            @id
  name                      String
  email                     String            @unique
  image                     String?
  createdAt                 DateTime
  updatedAt                 DateTime
  emailVerified             Boolean
  customerId                String?
  monthlyQuestionsResetDate DateTime          @default(now())
  monthlyQuestionsUsed      Int               @default(0)
  subscriptionEndDate       DateTime?
  subscriptionId            String?
  subscriptionPlan          String            @default("free")
  subscriptionStartDate     DateTime?
  subscriptionStatus        String            @default("active")
  totalPdfsUploaded         Int               @default(0)
  monthlyPdfsResetDate      DateTime          @default(now())
  monthlyPdfsUploaded       Int               @default(0)
  totalMessagesCreated      Int               @default(0)
  accounts                  Account[]
  chats                     Chat[]
  comments                  Comment[]
  commentReplies            CommentReply[]
  highlights                Highlight[]
  messages                  Message[]
  messageFeedback           MessageFeedback[]
  pdfs                      PDF[]
  sessions                  Session[]
  shapes                    Shape[]
  subscriptions             Subscription[]
  textElements              TextElement[]

  @@map("user")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  userId                String
  scope                 String?
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model PDF {
  id             String        @id @default(cuid())
  title          String
  fileName       String
  fileUrl        String
  fileSize       Int
  pageCount      Int?
  uploadedAt     DateTime      @default(now())
  lastAccessedAt DateTime      @default(now())
  userId         String
  textExtracted  Boolean       @default(false)
  chats          Chat[]
  comments       Comment[]
  highlights     Highlight[]
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  chunks         PDFChunk[]
  penDrawings    PenDrawing[]
  shapes         Shape[]
  textElements   TextElement[]

  @@index([userId, uploadedAt])
  @@index([userId, lastAccessedAt(sort: Desc)])
  @@map("pdf")
}

model PDFChunk {
  id         String   @id @default(cuid())
  content    String
  pageNumber Int
  startIndex Int
  endIndex   Int
  chunkIndex Int
  embedding  Unsupported("vector(1536)")? // TODO: Change to vector(1536) after fixing migration
  createdAt  DateTime @default(now())
  pdfId      String
  pdf        PDF      @relation(fields: [pdfId], references: [id], onDelete: Cascade)

  @@index([pdfId, pageNumber])
  @@index([pdfId, chunkIndex])
  @@map("pdf_chunk")
}

model Chat {
  id        String    @id @default(cuid())
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  pdfId     String
  pdf       PDF       @relation(fields: [pdfId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([userId, pdfId])
  @@index([userId, updatedAt(sort: Desc)])
  @@index([pdfId, updatedAt(sort: Desc)])
  @@map("chat")
}

model Message {
  id        String            @id @default(cuid())
  content   String
  role      String
  createdAt DateTime          @default(now())
  chatId    String
  userId    String
  imageData String?
  imageUrl  String?
  chat      Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedback  MessageFeedback[]

  @@index([chatId, createdAt])
  @@index([userId, createdAt])
  @@map("message")
}

model Comment {
  id         String         @id @default(cuid())
  content    String
  x          Float
  y          Float
  pageNumber Int
  resolved   Boolean        @default(false)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  pdfId      String
  userId     String
  pdf        PDF            @relation(fields: [pdfId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies    CommentReply[]

  @@map("comment")
}

model CommentReply {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  commentId String
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comment_reply")
}

model TextElement {
  id         String   @id @default(cuid())
  content    String
  x          Float
  y          Float
  pageNumber Int
  width      Int
  fontSize   Int
  color      String
  textAlign  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pdfId      String
  userId     String
  pdf        PDF      @relation(fields: [pdfId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("text_element")
}

model Highlight {
  id         String   @id @default(cuid())
  text       String
  color      String
  rects      Json?
  x          Float?
  y          Float?
  width      Float?
  height     Float?
  pageNumber Int
  createdAt  DateTime @default(now())
  pdfId      String
  userId     String
  pdf        PDF      @relation(fields: [pdfId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("highlight")
}

model PenDrawing {
  id         String   @id @default(cuid())
  pdfId      String
  pageNumber Int
  strokes    Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pdf        PDF      @relation(fields: [pdfId], references: [id], onDelete: Cascade)

  @@unique([pdfId, pageNumber], name: "pdfId_pageNumber")
  @@map("pen_drawing")
}

model Subscription {
  id                 String    @id @default(cuid())
  userId             String
  subscriptionId     String    @unique
  customerId         String
  productId          String
  plan               String
  status             String
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean   @default(false)
  cancelledAt        DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscription")
}

model SubscriptionPlan {
  id                   String   @id @default(cuid())
  name                 String   @unique
  displayName          String
  price                Float
  currency             String   @default("USD")
  interval             String
  maxPdfs              Int
  maxFileSize          Int
  maxQuestionsPerMonth Int
  maxPagesPerPdf       Int
  features             Json?
  active               Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("subscription_plan")
}

model Shape {
  id          String   @id @default(cuid())
  pdfId       String
  pageNumber  Int
  userId      String
  type        String
  x           Float
  y           Float
  width       Float
  height      Float
  rotation    Float?   @default(0)
  color       String   @default("#000000")
  strokeWidth Float?   @default(2)
  fillColor   String?
  opacity     Float?   @default(1)
  selected    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  pdf         PDF      @relation(fields: [pdfId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([pdfId, pageNumber])
  @@map("shape")
}

model MessageFeedback {
  id            String   @id @default(cuid())
  messageId     String
  userId        String
  feedbackType  String
  dislikeReason String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  message       Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId], name: "message_user_feedback")
  @@index([messageId])
  @@index([userId])
  @@map("message_feedback")
}

