generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id
  name           String
  email          String         @unique
  image          String?
  createdAt      DateTime
  updatedAt      DateTime
  emailVerified  Boolean
  
  // Subscription fields
  subscriptionPlan    String       @default("free") // free, pro, ultimate
  subscriptionStatus  String       @default("active") // active, inactive, cancelled, past_due
  subscriptionId      String?      // DodoPayments subscription ID
  customerId          String?      // DodoPayments customer ID
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  
  // Usage tracking
  monthlyQuestionsUsed Int         @default(0)
  monthlyQuestionsResetDate DateTime @default(now())
  totalPdfsUploaded    Int         @default(0)
  
  accounts       Account[]
  chats          Chat[]
  comments       Comment[]
  commentReplies CommentReply[]
  messages       Message[]
  pdfs           PDF[]
  sessions       Session[]
  textElements   TextElement[]
  highlights     Highlight[]
  subscriptions  Subscription[]
  shapes         Shape[]

  @@map("user")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  userId                String
  scope                 String?
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model PDF {
  id             String        @id @default(cuid())
  title          String
  fileName       String
  fileUrl        String
  fileSize       Int
  pageCount      Int?
  uploadedAt     DateTime      @default(now())
  lastAccessedAt DateTime      @default(now())
  userId         String
  textExtracted  Boolean       @default(false)
  chats          Chat[]
  comments       Comment[]
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  textElements   TextElement[]
  highlights     Highlight[]
  chunks         PDFChunk[]
  shapes         Shape[]

  @@map("pdf")
}

model PDFChunk {
  id         String   @id @default(cuid())
  content    String   // The text content of the chunk
  pageNumber Int      // Page number this chunk belongs to
  startIndex Int      // Starting character index on the page
  endIndex   Int      // Ending character index on the page
  chunkIndex Int      // Sequential chunk number within the PDF
  embedding  String?  // Optional: Vector embedding for semantic search
  createdAt  DateTime @default(now())
  pdfId      String
  pdf        PDF      @relation(fields: [pdfId], references: [id], onDelete: Cascade)
  
  @@index([pdfId, pageNumber])
  @@index([pdfId, chunkIndex])
  @@map("pdf_chunk")
}

model Chat {
  id        String    @id @default(cuid())
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  pdfId     String
  pdf       PDF       @relation(fields: [pdfId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("chat")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  role      String
  createdAt DateTime @default(now())
  chatId    String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("message")
}

model Comment {
  id         String         @id @default(cuid())
  content    String
  x          Float
  y          Float
  pageNumber Int
  resolved   Boolean        @default(false)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  pdfId      String
  userId     String
  pdf        PDF            @relation(fields: [pdfId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies    CommentReply[]

  @@map("comment")
}

model CommentReply {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  commentId String
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comment_reply")
}

model TextElement {
  id         String   @id @default(cuid())
  content    String
  x          Float
  y          Float
  pageNumber Int
  width      Int
  fontSize   Int
  color      String
  textAlign  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pdfId      String
  userId     String
  pdf        PDF      @relation(fields: [pdfId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("text_element")
}

model Highlight {
  id         String   @id @default(cuid())
  text       String
  color      String
  rects      Json?    // Store array of rectangles as JSON
  x          Float?   // Keep for backward compatibility
  y          Float?   // Keep for backward compatibility  
  width      Float?   // Keep for backward compatibility
  height     Float?   // Keep for backward compatibility
  pageNumber Int
  createdAt  DateTime @default(now())
  pdfId      String
  userId     String
  pdf        PDF      @relation(fields: [pdfId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("highlight")
}

model Subscription {
  id                    String   @id @default(cuid())
  userId                String
  subscriptionId        String   @unique // DodoPayments subscription ID
  customerId            String   // DodoPayments customer ID
  productId             String   // DodoPayments product ID
  plan                  String   // free, pro, ultimate
  status                String   // active, inactive, cancelled, past_due, on_hold
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  cancelAtPeriodEnd     Boolean  @default(false)
  cancelledAt           DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscription")
}

model SubscriptionPlan {
  id                    String @id @default(cuid())
  name                  String @unique // free, pro, ultimate
  displayName           String
  price                 Float
  currency              String @default("USD")
  interval              String // month
  maxPdfs               Int    // -1 for unlimited
  maxFileSize           Int    // in MB
  maxQuestionsPerMonth  Int    // -1 for unlimited
  maxPagesPerPdf        Int    // -1 for unlimited
  features              Json?  // Additional features as JSON
  active                Boolean @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@map("subscription_plan")
}

model Shape {
  id         String   @id @default(cuid())
  type       String   // rectangle, circle, arrow, line
  x          Float    // X position as percentage
  y          Float    // Y position as percentage  
  width      Float    // Width as percentage
  height     Float    // Height as percentage
  rotation   Float    @default(0) // Rotation in degrees
  color      String   @default("#000000") // Hex color
  strokeWidth Float   @default(2) // Stroke width in pixels
  fillColor  String?  // Optional fill color
  opacity    Float    @default(1) // 0-1 opacity
  pageNumber Int      // Page number
  zIndex     Int      @default(0) // Layer order
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  pdfId      String
  userId     String
  pdf        PDF      @relation(fields: [pdfId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([pdfId, pageNumber])
  @@map("shape")
}
