generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id
  name           String
  email          String         @unique
  image          String?
  createdAt      DateTime
  updatedAt      DateTime
  emailVerified  Boolean
  accounts       Account[]
  chats          Chat[]
  comments       Comment[]
  commentReplies CommentReply[]
  messages       Message[]
  pdfs           PDF[]
  sessions       Session[]
  textElements   TextElement[]

  @@map("user")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  userId                String
  scope                 String?
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model PDF {
  id              String        @id @default(cuid())
  title           String
  fileName        String
  fileUrl         String
  fileSize        Int
  pageCount       Int?
  extractedText   String?       // Full PDF text content for AI context
  isTextExtracted Boolean       @default(false) // Track extraction status
  uploadedAt      DateTime      @default(now())
  lastAccessedAt  DateTime      @default(now())
  userId          String
  chats           Chat[]
  comments        Comment[]
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  textElements    TextElement[]

  @@map("pdf")
}

model Chat {
  id        String    @id @default(cuid())
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  pdfId     String
  pdf       PDF       @relation(fields: [pdfId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("chat")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  role      String
  createdAt DateTime @default(now())
  chatId    String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("message")
}

model Comment {
  id         String         @id @default(cuid())
  content    String
  x          Float
  y          Float
  pageNumber Int
  resolved   Boolean        @default(false)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  pdfId      String
  userId     String
  pdf        PDF            @relation(fields: [pdfId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies    CommentReply[]

  @@map("comment")
}

model CommentReply {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  commentId String
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comment_reply")
}

model TextElement {
  id         String   @id @default(cuid())
  content    String
  x          Float
  y          Float
  pageNumber Int
  width      Int
  fontSize   Int
  color      String
  textAlign  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pdfId      String
  userId     String
  pdf        PDF      @relation(fields: [pdfId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("text_element")
}
